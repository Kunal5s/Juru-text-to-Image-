<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Juru Smart Tool - AI Character Generator</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: #333;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            justify-content: center;
            align-items: center;
            overflow-y: auto;
        }

        .container {
            width: 100%;
            max-width: 900px;
            background: #ffffff;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
            margin: 20px auto;
            animation: fadeIn 1s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tool-form {
            margin-bottom: 25px;
        }

        .input-group {
            margin-bottom: 20px;
            position: relative;
        }

        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 16px;
            color: #444;
            font-weight: 600;
        }

        .input-group textarea, .input-group input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 14px;
            background: #f9f9f9;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        .input-group textarea:focus, .input-group input:focus {
            border-color: #00c4cc;
            box-shadow: 0 0 10px rgba(0, 196, 204, 0.3);
            outline: none;
        }

        textarea {
            height: 120px;
            resize: vertical;
        }

        .input-actions {
            position: absolute;
            right: 15px;
            top: 15px;
            display: flex;
            gap: 8px;
        }

        .input-actions button {
            padding: 8px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 18px;
            color: #00c4cc;
            transition: color 0.3s ease;
        }

        .input-actions button:hover {
            color: #009ba1;
        }

        .info-icon {
            cursor: help;
            color: #00c4cc;
            margin-left: 5px;
            font-size: 14px;
        }

        .info-icon:hover {
            color: #009ba1;
        }

        .options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .option-group {
            padding: 10px;
            background: #f9f9f9;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        }

        .option-group label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            color: #555;
            font-weight: 500;
        }

        select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 14px;
            background: #fff url('data:image/svg+xml;utf8,<svg fill="%2300c4cc" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>') no-repeat right 10px center;
            appearance: none;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }

        select:focus {
            border-color: #00c4cc;
            box-shadow: 0 0 10px rgba(0, 196, 204, 0.3);
            outline: none;
        }

        button {
            padding: 14px 28px;
            background: linear-gradient(45deg, #00c4cc, #009ba1);
            color: #fff;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: transform 0.3s ease, background 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 196, 204, 0.3);
        }

        button:hover {
            transform: translateY(-2px);
            background: linear-gradient(45deg, #009ba1, #007a7f);
        }

        .share-settings, .generate-btn, .download-btn {
            width: 100%;
            margin: 5px 0;
            background: linear-gradient(45deg, #00c4cc, #009ba1);
            color: #fff;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            transition: transform 0.3s ease, background 0.3s ease;
            padding: 14px;
            box-shadow: 0 4px 15px rgba(0, 196, 204, 0.3);
        }

        .share-settings:hover, .generate-btn:hover, .download-btn:hover {
            transform: translateY(-2px);
            background: linear-gradient(45deg, #009ba1, #007a7f);
        }

        .output {
            margin-top: 25px;
            text-align: center;
            color: #555;
        }

        .output img {
            max-width: 100%;
            border-radius: 12px;
            margin: 15px 0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .output img:hover {
            transform: scale(1.05);
        }

        .output p {
            font-style: italic;
            color: #777;
            margin-bottom: 15px;
        }

        .footer-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 25px;
        }

        .back-btn, .feedback-btn {
            padding: 12px 24px;
            background: linear-gradient(45deg, #00c4cc, #009ba1);
            color: #fff;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: transform 0.3s ease, background 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 196, 204, 0.3);
        }

        .back-btn:hover, .feedback-btn:hover {
            transform: translateY(-2px);
            background: linear-gradient(45deg, #009ba1, #007a7f);
        }

        .bottom-bar {
            background: #2e2e2e;
            color: #fff;
            padding: 15px 20px;
            text-align: center;
            position: fixed;
            bottom: 0;
            width: 100%;
            box-shadow: 0 -5px 15px rgba(0, 0, 0, 0.1);
        }

        .bottom-bar p {
            margin: 0;
            font-size: 14px;
            font-weight: 500;
        }

        .bottom-bar a {
            color: #00c4cc;
            margin: 0 15px;
            text-decoration: none;
            font-weight: 600;
            transition: color 0.3s ease;
        }

        .bottom-bar a:hover {
            color: #fff;
        }

        @media (max-width: 768px) {
            .container { padding: 20px; margin: 10px auto; max-width: 700px; }
            .tool-form { max-width: 100%; }
            .options { grid-template-columns: 1fr; gap: 15px; }
            .option-group { padding: 8px; }
        }

        @media (max-width: 480px) {
            .container { margin: 5px auto; padding: 15px; }
            .options { gap: 10px; }
            button, .share-settings, .generate-btn, .download-btn, .back-btn, .feedback-btn { padding: 12px 20px; font-size: 14px; }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="tool-form">
            <div class="input-group">
                <label for="character-description">Description <i class="info-icon" title="Describe the character you want to generate">ⓘ</i></label>
                <textarea id="character-description" placeholder="e.g., 'magic wand, sprinkling stardust'"></textarea>
                <div class="input-actions">
                    <button class="dice-btn" onclick="randomizeDescription()">🎲</button>
                    <button class="brain-btn" onclick="suggestDescription()">🧠</button>
                </div>
            </div>
            <div class="input-group">
                <label for="anti-description">Anti-Description (optional) <i class="info-icon" title="Specify things you don’t want in the image">ⓘ</i></label>
                <input type="text" id="anti-description" placeholder="e.g., 'things you don’t want in the image'">
            </div>
            <div class="options">
                <div class="option-group">
                    <label for="art-style">Art Style <i class="info-icon" title="Choose the artistic style for your character">ⓘ</i></label>
                    <select id="art-style">
                        <option value="">Select Art Style</option>
                        <option value="painted-anime">Painted Anime</option>
                        <option value="casual-photo">Casual Photo</option>
                        <option value="cinematic">Cinematic</option>
                        <option value="digital-painting">Digital Painting</option>
                        <option value="concept-art">Concept Art</option>
                        <option value="no-style">No Style</option>
                        <option value="3d-disney-character">3D Disney Character</option>
                        <option value="2d-disney-character">2D Disney Character</option>
                        <option value="disney-sketch">Disney Sketch</option>
                        <option value="concept-sketch">Concept Sketch</option>
                        <option value="painterly">Painterly</option>
                        <option value="oil-painting">Oil Painting</option>
                        <option value="oil-painting-realism">Oil Painting - Realism</option>
                        <option value="oil-painting-old">Oil Painting - Old</option>
                        <option value="professional-photo">Professional Photo</option>
                        <option value="anime">Anime</option>
                        <option value="drawn-anime">Drawn Anime</option>
                        <option value="cute-anime">Cute Anime</option>
                        <option value="soft-anime">Soft Anime</option>
                        <option value="fantasy-painting">Fantasy Painting</option>
                        <option value="fantasy-landscape">Fantasy Landscape</option>
                        <option value="fantasy-portrait">Fantasy Portrait</option>
                        <option value="studio-ghibli">Studio Ghibli</option>
                        <option value="50s-enamel-sign">50s Enamel Sign</option>
                        <option value="vintage-comic">Vintage Comic</option>
                        <option value="franco-belgian-comic">Franco-Belgian Comic</option>
                        <option value="tintin-comic">Tintin Comic</option>
                        <option value="medieval">Medieval</option>
                        <option value="pixel-art">Pixel Art</option>
                        <option value="furry-oil">Furry - Oil</option>
                        <option value="furry-cinematic">Furry - Cinematic</option>
                        <option value="furry-painted">Furry - Painted</option>
                        <option value="furry-drawn">Furry - Drawn</option>
                        <option value="cute-figurine">Cute Figurine</option>
                        <option value="3d-emoji">3D Emoji</option>
                        <option value="illustration">Illustration</option>
                        <option value="flat-style-icon">Flat Style Icon</option>
                        <option value="flat-style-logo">Flat Style Logo</option>
                        <option value="game-art-icon">Game Art Icon</option>
                        <option value="digital-painting-icon">Digital Painting Icon</option>
                        <option value="concept-art-icon">Concept Art Icon</option>
                        <option value="cute-3d-icon">Cute 3D Icon</option>
                        <option value="cute-3d-icon-set">Cute 3D Icon Set</option>
                        <option value="crayon-drawing">Crayon Drawing</option>
                        <option value="pencil">Pencil</option>
                        <option value="tattoo-design">Tattoo Design</option>
                        <option value="waifu">Waifu</option>
                        <option value="yugioh-art">YuGiOh Art</option>
                        <option value="vintage-pulp-art">Vintage Pulp Art</option>
                        <option value="50s-infomercial-anime">50s Infomercial Anime</option>
                        <option value="3d-pokemon">3D Pokemon</option>
                        <option value="painted-pokemon">Painted Pokemon</option>
                        <option value="2d-pokemon">2D Pokemon</option>
                        <option value="vintage-anime">Vintage Anime</option>
                        <option value="neon-vintage-anime">Neon Vintage Anime</option>
                        <option value="manga">Manga</option>
                        <option value="fantasy-world-map">Fantasy World Map</option>
                        <option value="fantasy-city-map">Fantasy City Map</option>
                        <option value="old-world-map">Old World Map</option>
                        <option value="3d-isometric-icon">3D Isometric Icon</option>
                    </select>
                </div>
                <div class="option-group">
                    <label for="shape">Shape <i class="info-icon" title="Choose the shape of the image">ⓘ</i></label>
                    <select id="shape">
                        <option value="square">Square</option>
                    </select>
                </div>
                <div class="option-group">
                    <label for="aspect-ratio">Aspect Ratio <i class="info-icon" title="Choose the image aspect ratio">ⓘ</i></label>
                    <select id="aspect-ratio">
                        <option value="1:1">1:1</option>
                        <option value="4:3">4:3</option>
                        <option value="16:9">16:9</option>
                        <option value="3:2">3:2</option>
                        <option value="9:16">9:16 (Vertical)</option>
                        <option value="2:3">2:3</option>
                        <option value="5:4">5:4</option>
                        <option value="21:9">21:9 (Ultrawide)</option>
                    </select>
                </div>
                <div class="option-group">
                    <label for="quantity">How many? <i class="info-icon" title="Number of images to generate">ⓘ</i></label>
                    <select id="quantity">
                        <option value="1">1</option>
                        <option value="3">3</option>
                        <option value="6">6</option>
                        <option value="12">12</option>
                    </select>
                </div>
            </div>
            <button class="share-settings" onclick="shareSettings()">🔗 Share These Settings</button>
            <button class="generate-btn" onclick="generateCharacter()">✨ Generate</button>
            <div class="output" id="character-output">
                <p>Starting... (should only take a few seconds)</p>
            </div>
            <div class="footer-actions">
                <button class="back-btn" onclick="goBack()">⬅</button>
                <button class="feedback-btn" onclick="provideFeedback()">❓ Feedback</button>
            </div>
        </div>
    </div>

    <div class="bottom-bar">
        <p>© 2025 Juru Smart Tool. All rights reserved.</p>
        <a href="javascript:void(0)" onclick="showPrivacy()">Privacy Policy</a>
        <a href="javascript:void(0)" onclick="showAbout()">About Us</a>
        <a href="javascript:void(0)" onclick="showContact()">Contact Us</a>
    </div>

    <script>
        // State Variables
        let usageCount = localStorage.getItem('dailyUsage') || 0;
        document.getElementById('daily-usage').textContent = usageCount;
        let selectedTool = null;
        let generatedImages = []; // To store generated image URLs for downloading

        // Initialize - Verify JavaScript is loaded
        console.log('Juru Smart Tool JavaScript loaded successfully with Hugging Face');

        // Utility Functions
        function updateUsage() {
            usageCount++;
            localStorage.setItem('dailyUsage', usageCount);
            document.getElementById('daily-usage').textContent = usageCount;
        }

        function showTool(toolId) {
            console.log(`Attempting to show tool: ${toolId}`);
            selectedTool = toolId;
            const toolContainer = document.getElementById('tool-container');
            const toolElement = document.getElementById(toolId);

            if (toolContainer && toolElement) {
                toolContainer.classList.add('active');
                document.querySelectorAll('.tool-container').forEach(tool => tool.classList.remove('active'));
                toolElement.classList.add('active');
                console.log(`Tool ${toolId} activated successfully with Hugging Face`);
                updateUsage();
            } else {
                console.error(`Error: Could not find elements - toolContainer: ${!!toolContainer}, toolElement: ${!!toolElement}`);
                alert(`Error: Tool ${toolId} could not be loaded with Hugging Face. Check console for details.`);
            }
        }

        function goBack() {
            console.log('Returning to tools grid with Hugging Face');
            selectedTool = null;
            const toolContainer = document.getElementById('tool-container');

            if (toolContainer) {
                toolContainer.classList.remove('active');
                resetForm();
                console.log('Returned to tools grid successfully with Hugging Face');
                updateUsage();
            } else {
                console.error(`Error: Could not find toolContainer - toolContainer: ${!!toolContainer}`);
                alert('Error: Could not return to home with Hugging Face. Check console for details.`);
            }
        }

        function resetForm() {
            const elements = {
                characterDescription: document.getElementById('character-description'),
                antiDescription: document.getElementById('anti-description'),
                artStyle: document.getElementById('art-style'),
                shape: document.getElementById('shape'),
                aspectRatio: document.getElementById('aspect-ratio'),
                quantity: document.getElementById('quantity'),
                characterOutput: document.getElementById('character-output')
            };

            Object.values(elements).forEach(element => {
                if (element) {
                    if (element.tagName === 'TEXTAREA' || element.tagName === 'INPUT') {
                        element.value = '';
                    } else if (element.tagName === 'SELECT') {
                        element.value = element.id === 'shape' ? 'square' : (element.id === 'aspect-ratio' ? '1:1' : '1');
                    } else if (element.tagName === 'DIV') {
                        element.innerHTML = '<p>Starting... (should only take a few seconds)</p>';
                    }
                } else {
                    console.warn(`Element not found with Hugging Face: ${Object.keys(elements)[Object.values(elements).indexOf(element)]}`);
                }
            });
            generatedImages = []; // Reset saved images
            console.log('Form reset successfully with Hugging Face');
        }

        // Utility Functions for Navigation (Optional Modals)
        function showPrivacy() {
            alert('Privacy Policy: We respect your privacy. This tool uses Hugging Face directly for testing (API key exposed), but for production, use a secure proxy. No personal data is stored beyond local usage counts.');
        }

        function showAbout() {
            alert('About Us: Juru Smart Tool offers an AI Character Generator using Hugging Face for real-time image generation. For production, secure your API key with a proxy or backend server.');
        }

        function showContact() {
            alert('Contact Us: Email: support@jurusmarttool.com');
        }

        // Hugging Face Image Generation Functions (Direct Integration for Testing)
        // WARNING: This exposes your API key in client-side code. Use a proxy for production.
        const HUGGING_FACE_API_KEY = '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'; // Add your API key here for testing

        async function generateCharacter() {
            const description = document.getElementById('character-description')?.value;
            const antiDescription = document.getElementById('anti-description')?.value || '';
            const artStyle = document.getElementById('art-style')?.value || 'cute-3d-icon';
            const shape = document.getElementById('shape')?.value || 'square';
            const aspectRatio = document.getElementById('aspect-ratio')?.value || '1:1';
            const quantity = document.getElementById('quantity')?.value || '1';
            const output = document.getElementById('character-output');

            if (!description || !artStyle || !shape || !aspectRatio) {
                if (output) {
                    output.innerHTML = '<p>Please fill in all required fields with Hugging Face!</p>';
                } else {
                    console.error('Character output element not found with Hugging Face');
                }
                return;
            }

            if (output) {
                output.innerHTML = '<p>Starting... (should only take a few seconds)</p>';
                const images = [];
                const delay = 2000; // Base delay per image to simulate API processing
                for (let i = 0; i < parseInt(quantity); i++) {
                    setTimeout(async () => {
                        try {
                            const prompt = `${description}, ${artStyle} style, ${shape} shape, ${aspectRatio} aspect ratio${antiDescription ? ', avoid: ' + antiDescription : ''}`;
                            let width, height;
                            switch (aspectRatio) {
                                case '1:1': width = 512; height = 512; break;
                                case '4:3': width = 640; height = 480; break;
                                case '16:9': width = 640; height = 360; break;
                                case '3:2': width = 600; height = 400; break;
                                case '9:16': width = 360; height = 640; break;
                                case '2:3': width = 400; height = 600; break;
                                case '5:4': width = 500; height = 400; break;
                                case '21:9': width = 672; height = 288; break;
                                default: width = 512; height = 512;
                            }
                            const response = await fetch('https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-1024-v1-0', {
                                method: 'POST',
                                headers: {
                                    'Authorization': `Bearer ${HUGGING_FACE_API_KEY}`,
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    inputs: prompt,
                                    parameters: {
                                        width: width,
                                        height: height,
                                        steps: 50,
                                        guidance_scale: 7.5,
                                        negative_prompt: antiDescription
                                    }
                                })
                            });

                            if (!response.ok) {
                                const errorText = await response.text();
                                throw new Error(`Hugging Face request failed: ${response.status} - ${errorText}`);
                            }

                            const data = await response.json();
                            const imageUrl = `data:image/png;base64,${data[0]}`;

                            images.push(`<img src="${imageUrl}" alt="Generated Character with Hugging Face #${i + 1}" style="max-width: 100%; margin: 15px 0;"><button class="download-btn" onclick="downloadImage('${imageUrl}', ${i + 1})">Download Image</button>`);
                            if (i === parseInt(quantity) - 1) {
                                output.innerHTML = images.join('') + '<p>Generation complete with Hugging Face!</p>';
                                generatedImages = [...generatedImages, ...images.map(img => img.match(/src="([^"]+)"/)[1])];
                                console.log(`Characters generated successfully with Hugging Face: style: ${artStyle}, shape: ${shape}, aspect ratio: ${aspectRatio}, quantity: ${quantity}`);
                            }
                        } catch (error) {
                            console.error('Character generation error with Hugging Face:', error);
                            images.push(`<p>Failed to generate image #${i + 1}: ${error.message}</p>`);
                            if (i === parseInt(quantity) - 1) {
                                output.innerHTML = images.join('') + '<p>Some generations failed with Hugging Face!</p>';
                            }
                        }
                    }, delay * (i + 1)); // Staggered delay for multiple images
                }
            } else {
                console.error('Character output element not found with Hugging Face');
                alert('Error: Could not generate character with Hugging Face. Check console for details.');
            }
        }

        function randomizeDescription() {
            const descriptions = [
                'magic wand, sprinkling stardust',
                'cybernetic dragon rider, gliding over a post-apocalyptic wasteland',
                'mystical unicorn, galloping through enchanted forests',
                'robotic knight, battling in a futuristic arena',
                'fairy queen, casting spells under a moonlit sky'
            ];
            const description = document.getElementById('character-description');
            if (description) {
                description.value = descriptions[Math.floor(Math.random() * descriptions.length)];
                console.log('Description randomized successfully with Hugging Face');
            } else {
                console.error('Description element not found with Hugging Face');
                alert('Error: Could not randomize description with Hugging Face. Check console for details.');
            }
        }

        function suggestDescription() {
            const description = document.getElementById('character-description')?.value || 'an AI character';
            const output = document.getElementById('character-output');

            if (output) {
                output.innerHTML = '<p>Suggesting description with Hugging Face...</p>';
                const suggestion = `Enhance ${description.toLowerCase()} with vibrant colors and dynamic poses, perfect for illustrations.`;
                setTimeout(() => {
                    output.innerHTML = `<p>Suggestion: ${suggestion}</p><button onclick="useSuggestion()">Use This Suggestion</button>`;
                    console.log('Description suggested successfully with Hugging Face');
                }, 1000); // Simulate initial delay
            } else {
                console.error('Character output element not found with Hugging Face');
                alert('Error: Could not suggest description with Hugging Face. Check console for details.');
            }
        }

        function useSuggestion() {
            const output = document.getElementById('character-output');
            const characterDescription = document.getElementById('character-description');

            if (output && characterDescription) {
                const suggestionText = output.querySelector('p')?.textContent.replace('Suggestion: ', '') || '';
                characterDescription.value = suggestionText;
                output.innerHTML = '<p>Starting... (should only take a few seconds)</p>';
                console.log('Suggestion applied to description successfully with Hugging Face');
            } else {
                console.error('Character output or description element not found with Hugging Face');
                alert('Error: Could not apply suggestion with Hugging Face. Check console for details.');
            }
        }

        function shareSettings() {
            const description = document.getElementById('character-description')?.value || '';
            const antiDescription = document.getElementById('anti-description')?.value || '';
            const artStyle = document.getElementById('art-style')?.value || '';
            const shape = document.getElementById('shape')?.value || '';
            const aspectRatio = document.getElementById('aspect-ratio')?.value || '';
            const quantity = document.getElementById('quantity')?.value || '1';

            const settings = `Description: ${description}\nAnti-Description: ${antiDescription}\nArt Style: ${artStyle}\nShape: ${shape}\nAspect Ratio: ${aspectRatio}\nQuantity: ${quantity}`;
            const encodedSettings = encodeURIComponent(settings);
            const shareUrl = `${window.location.origin}${window.location.pathname}?settings=${encodedSettings}`;

            if (navigator.clipboard) {
                navigator.clipboard.writeText(shareUrl).then(() => {
                    alert('Settings link copied to clipboard! Share this URL to replicate your settings.');
                    console.log('Settings shared successfully with Hugging Face');
                }).catch(err => {
                    console.error('Failed to copy settings link with Hugging Face:', err);
                    alert('Failed to copy settings. Please manually copy this URL: ' + shareUrl);
                });
            } else {
                alert('Copy this URL to share your settings: ' + shareUrl);
                console.log('Web clipboard not supported, showing alert for settings with Hugging Face');
            }
        }

        function downloadImage(imageUrl, index) {
            const link = document.createElement('a');
            link.href = imageUrl;
            link.download = `huggingface_character_${index}.png`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            console.log(`Image ${index} downloaded successfully with Hugging Face`);
            alert(`Image ${index} downloaded as 'huggingface_character_${index}.png'`);
        }

        function provideFeedback() {
            alert('Thank you for your feedback! Please email us at support@jurusmarttool.com with your suggestions.');
            console.log('Feedback requested successfully with Hugging Face');
        }
    </script>
</body>
</html>
